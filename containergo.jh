
application {
  config {
    baseName containerGoServer
    applicationType monolith
    packageName vn.containergo
    authenticationType jwt
    prodDatabaseType mongodb
    clientFramework angularX
  }
  entities *
  filter *
  paginate * with pagination
  service all with serviceImpl
  dto * with mapstruct
}

// Common
entity Provice {
	id UUID,
    code String required,
    name String required,
    description String
}

entity District {
	id UUID,
    code String required,
    name String required,
    description String
}

entity Ward {
	id UUID,
    code String required,
    name String required,
    description String
}

enum ContractType {
	SIGNED_CONTRACT,
    INDIVIDUAL
}

enum PaymentType {
	CASH_ON_DELIVERY,
    END_OF_MONTH
}

// Shipper
entity Shipper {
	id UUID,
    code String required,
    name String required,
    address String required,
    taxCode String,
    companySize Integer,
    paymentType PaymentType required,
    contractType ContractType required,
    contractValidUntil Instant,
    isApproved Boolean,
    isBillingInformationComplete Boolean,
    isProfileComplete Boolean
}

entity ShipperPersonGroup {
	id UUID,
    name String required
}

enum ShipperAccountType {
	DEPOSIT
}

entity ShipperAccount {
	id UUID,
    balance Double required,
    accountType ShipperAccountType required
}

entity ShipperPerson {
	id UUID,
    name String required,
    phone String required,
    email String,
    address String
}

entity ShipperNotification {
	id UUID,
    code String required,
    name String required,
    isEmailNotificationEnabled Boolean,
    isSmsNotificationEnabled Boolean,
    isAppNotificationEnabled Boolean
}

// Carrier
entity TruckType {
	id UUID,
    code String required,
    name String required,
    category String,
    height Integer,
    length Integer,
    maxSpeed Double,
    type String,
    weight Integer,
    width Integer
}

enum TruckStatus {
	AVAILABLE,
    IN_TRANSIT,
    UNDER_MAINTENANCE,
    OUT_OF_SERVICE
}

entity Truck {
    id UUID,
    code String required,
    name String required,
    model String,
    manufacturer String,
    year Integer,
    capacity Double,
    status TruckStatus required,
    mileage Double,
    numberPlate String required,
    lat Double,
    lng Double
}

entity Carrier {
	id UUID,
    code String required,
    name String required,
    address String required,
    taxCode String,
    bankAccount String,
    bankName String,
    accountName String,
    branchName String,
    companySize Integer,
    isApproved Boolean,
    vehicles Integer,
    shipmentsLeftForDay Integer,
    verifiedSince Instant
}

entity CarrierPersonGroup {
	id UUID,
    name String required
}

entity CarrierPerson {
	id UUID,
    name String required,
    phone String required,
    email String,
    address String
}

entity CenterPerson {
	id UUID,
    name String required,
    phone String required,
    email String,
    address String
}

entity CenterPersonGroup {
	id UUID,
    name String required
}

// Container
enum ContainerState {
    NEW,
  	BIDDING,
  	RECEIVED_OFFERS,
  	CONTAINER_CANCEL,
  	BIDDING_TIMEUP_WITH_NO_OFFER,
  	BIDDING_PENDING,
    OFFER_CHOSEN,
    SHIPMENT_PLAN_SENT,
    OFFER_CANCEL_BY_SHIPPER,
    SHIPMENT_IN_PROGRESS,
    PICKUP_SUCCESS,
    PICKUP_FAILED,
    PICKUP_CANCEL,
    DELIVERY_SUCCESS,
    POD_SUCCESS,
    POD_APPROVED,
    DELIVERY_FAILED,
    WAIT_FOR_CENTER_HANDLE_CONTAINER,
    REDELIVERY,
    RETURNING,
  	RETURN_SUCCESS,
  	RETURN_FAIL,
  	BIDDING_TIMEUP_WITH_OFFER,
  	SHIPMENT_SUCCESS
}

enum ShipmentStatus {
    NEW
}

entity ContainerStatus {
	id UUID,
    code String required,
    name String required,
    description String
}

entity ContainerStatusGroup {
	id UUID,
    code String required,
    name String required,
    description String
}

entity ContainerType {
	id UUID,
    code String required,
    name String required,
    description String
}

entity ContainerOwner {
	id UUID,
    name String required,
    phone String,
    email String,
    address String
}

entity ShipmentPlan {
	id UUID,
    estimatedPickupFromDate Instant required,
    estimatedPickupUntilDate Instant required,
    estimatedDropoffFromDate Instant required,
    estimatedDropoffUntilDate Instant required,
    driverId UUID required,
    truckId UUID required
}

entity Container {
	id UUID,
    contNo String required,
    estimatedPrice Double required,
    distance Double required,
    desiredPrice Double required,
    additionalRequirements String,
    pickupContact String required,
    pickupContactPhone String required,
    pickupAddress String required,
    pickupLat Double required,
    pickupLng Double required,
    pickupFromDate Instant required,
    dropoffContact String,
    dropoffContactPhone String,
    dropoffAddress String required,
    dropoffLat Double,
    dropoffLng Double,
    points String,
    dropoffUntilDate Instant,
    state ContainerState required,
    shipperId UUID required,
    carrierId UUID,
    totalWeight Double required,
    biddingFromDate Instant,
    biddingUntilDate Instant
}

entity ShipmentHistory {
	id UUID,
    event String required,
    timestamp Instant required,
    executedBy String required,
    location String,
    lat Double,
    lng Double
}

// Offer
enum OfferState {
    PENDING, // Offer has been made, waiting for acceptance
    ACCEPTED, // Offer has been accepted
    REJECTED, // Offer has been rejected
    EXPIRED, // Offer has expired
    WITHDRAWN // Offer has been withdrawn by the bidder
}

entity Offer {
	id UUID,
    message String,
    estimatedPickupFromDate Instant required,
    estimatedPickupUntilDate Instant required,
    estimatedDropoffFromDate Instant required,
    estimatedDropoffUntilDate Instant required,
    state OfferState required,
    price Double required,
    carrierId UUID required,
    truckId UUID
}

relationship ManyToOne {
	Container{pickupProvice required} to Provice
    Container{pickupDistrict required} to District
    Container{pickupWard required} to Ward
    Container{dropoffProvice required} to Provice
    Container{dropoffDistrict required} to District
    Container{dropoffWard} to Ward
    Container{type required} to ContainerType
    Container{status required} to ContainerStatus
    Container{truckType} to TruckType
    Container{truck} to Truck
    Container{owner} to ContainerOwner
    ShipmentHistory{container required} to Container
    Offer{container required} to Container
    Truck{type required} to TruckType,
    ShipperPerson{group required} to ShipperPersonGroup,
    CarrierPerson{group required} to CarrierPersonGroup,
    CenterPerson{group required} to CenterPersonGroup,
    ShipperAccount{shipper required} to ShipperAccount
}

relationship OneToMany {
	ContainerStatusGroup to ContainerStatus{group}
    Carrier to Truck{carrier}
    Carrier to CarrierPerson{carrier}
    Shipper to ShipperPerson{shipper}
    Container to ShipmentPlan{container}
    ShipperPerson{enabledNotifications} to ShipperNotification{person}
}

relationship ManyToMany {
    CenterPerson{groups} to CenterPersonGroup{users}
}