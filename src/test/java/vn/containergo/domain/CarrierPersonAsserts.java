package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CarrierPersonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierPersonAllPropertiesEquals(CarrierPerson expected, CarrierPerson actual) {
        assertCarrierPersonAutoGeneratedPropertiesEquals(expected, actual);
        assertCarrierPersonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierPersonAllUpdatablePropertiesEquals(CarrierPerson expected, CarrierPerson actual) {
        assertCarrierPersonUpdatableFieldsEquals(expected, actual);
        assertCarrierPersonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierPersonAutoGeneratedPropertiesEquals(CarrierPerson expected, CarrierPerson actual) {
        assertThat(expected)
            .as("Verify CarrierPerson auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierPersonUpdatableFieldsEquals(CarrierPerson expected, CarrierPerson actual) {
        assertThat(expected)
            .as("Verify CarrierPerson relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierPersonUpdatableRelationshipsEquals(CarrierPerson expected, CarrierPerson actual) {
        assertThat(expected)
            .as("Verify CarrierPerson relationships")
            .satisfies(e -> assertThat(e.getCarrier()).as("check carrier").isEqualTo(actual.getCarrier()));
    }
}
