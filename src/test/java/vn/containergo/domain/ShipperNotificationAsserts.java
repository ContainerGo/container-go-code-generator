package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ShipperNotificationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperNotificationAllPropertiesEquals(ShipperNotification expected, ShipperNotification actual) {
        assertShipperNotificationAutoGeneratedPropertiesEquals(expected, actual);
        assertShipperNotificationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperNotificationAllUpdatablePropertiesEquals(ShipperNotification expected, ShipperNotification actual) {
        assertShipperNotificationUpdatableFieldsEquals(expected, actual);
        assertShipperNotificationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperNotificationAutoGeneratedPropertiesEquals(ShipperNotification expected, ShipperNotification actual) {
        assertThat(expected)
            .as("Verify ShipperNotification auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperNotificationUpdatableFieldsEquals(ShipperNotification expected, ShipperNotification actual) {
        assertThat(expected)
            .as("Verify ShipperNotification relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(
                e ->
                    assertThat(e.getIsEmailNotificationEnabled())
                        .as("check isEmailNotificationEnabled")
                        .isEqualTo(actual.getIsEmailNotificationEnabled())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsSmsNotificationEnabled())
                        .as("check isSmsNotificationEnabled")
                        .isEqualTo(actual.getIsSmsNotificationEnabled())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsAppNotificationEnabled())
                        .as("check isAppNotificationEnabled")
                        .isEqualTo(actual.getIsAppNotificationEnabled())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperNotificationUpdatableRelationshipsEquals(ShipperNotification expected, ShipperNotification actual) {
        assertThat(expected)
            .as("Verify ShipperNotification relationships")
            .satisfies(e -> assertThat(e.getPerson()).as("check person").isEqualTo(actual.getPerson()));
    }
}
