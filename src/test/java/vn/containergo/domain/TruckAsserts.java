package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TruckAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTruckAllPropertiesEquals(Truck expected, Truck actual) {
        assertTruckAutoGeneratedPropertiesEquals(expected, actual);
        assertTruckAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTruckAllUpdatablePropertiesEquals(Truck expected, Truck actual) {
        assertTruckUpdatableFieldsEquals(expected, actual);
        assertTruckUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTruckAutoGeneratedPropertiesEquals(Truck expected, Truck actual) {
        assertThat(expected)
            .as("Verify Truck auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTruckUpdatableFieldsEquals(Truck expected, Truck actual) {
        assertThat(expected)
            .as("Verify Truck relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getManufacturer()).as("check manufacturer").isEqualTo(actual.getManufacturer()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()))
            .satisfies(e -> assertThat(e.getCapacity()).as("check capacity").isEqualTo(actual.getCapacity()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getMileage()).as("check mileage").isEqualTo(actual.getMileage()))
            .satisfies(e -> assertThat(e.getNumberPlate()).as("check numberPlate").isEqualTo(actual.getNumberPlate()))
            .satisfies(e -> assertThat(e.getLat()).as("check lat").isEqualTo(actual.getLat()))
            .satisfies(e -> assertThat(e.getLng()).as("check lng").isEqualTo(actual.getLng()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTruckUpdatableRelationshipsEquals(Truck expected, Truck actual) {
        assertThat(expected)
            .as("Verify Truck relationships")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getCarrier()).as("check carrier").isEqualTo(actual.getCarrier()));
    }
}
