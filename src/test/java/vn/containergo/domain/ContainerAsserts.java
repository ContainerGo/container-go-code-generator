package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContainerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllPropertiesEquals(Container expected, Container actual) {
        assertContainerAutoGeneratedPropertiesEquals(expected, actual);
        assertContainerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllUpdatablePropertiesEquals(Container expected, Container actual) {
        assertContainerUpdatableFieldsEquals(expected, actual);
        assertContainerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAutoGeneratedPropertiesEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableFieldsEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container relevant properties")
            .satisfies(e -> assertThat(e.getContNo()).as("check contNo").isEqualTo(actual.getContNo()))
            .satisfies(e -> assertThat(e.getEstimatedPrice()).as("check estimatedPrice").isEqualTo(actual.getEstimatedPrice()))
            .satisfies(e -> assertThat(e.getDistance()).as("check distance").isEqualTo(actual.getDistance()))
            .satisfies(e -> assertThat(e.getDesiredPrice()).as("check desiredPrice").isEqualTo(actual.getDesiredPrice()))
            .satisfies(
                e ->
                    assertThat(e.getAdditionalRequirements())
                        .as("check additionalRequirements")
                        .isEqualTo(actual.getAdditionalRequirements())
            )
            .satisfies(e -> assertThat(e.getPickupContact()).as("check pickupContact").isEqualTo(actual.getPickupContact()))
            .satisfies(e -> assertThat(e.getPickupContactPhone()).as("check pickupContactPhone").isEqualTo(actual.getPickupContactPhone()))
            .satisfies(e -> assertThat(e.getPickupAddress()).as("check pickupAddress").isEqualTo(actual.getPickupAddress()))
            .satisfies(e -> assertThat(e.getPickupLat()).as("check pickupLat").isEqualTo(actual.getPickupLat()))
            .satisfies(e -> assertThat(e.getPickupLng()).as("check pickupLng").isEqualTo(actual.getPickupLng()))
            .satisfies(e -> assertThat(e.getPickupFromDate()).as("check pickupFromDate").isEqualTo(actual.getPickupFromDate()))
            .satisfies(e -> assertThat(e.getDropoffContact()).as("check dropoffContact").isEqualTo(actual.getDropoffContact()))
            .satisfies(
                e -> assertThat(e.getDropoffContactPhone()).as("check dropoffContactPhone").isEqualTo(actual.getDropoffContactPhone())
            )
            .satisfies(e -> assertThat(e.getDropoffAddress()).as("check dropoffAddress").isEqualTo(actual.getDropoffAddress()))
            .satisfies(e -> assertThat(e.getDropoffLat()).as("check dropoffLat").isEqualTo(actual.getDropoffLat()))
            .satisfies(e -> assertThat(e.getDropoffLng()).as("check dropoffLng").isEqualTo(actual.getDropoffLng()))
            .satisfies(e -> assertThat(e.getPoints()).as("check points").isEqualTo(actual.getPoints()))
            .satisfies(e -> assertThat(e.getDropoffUntilDate()).as("check dropoffUntilDate").isEqualTo(actual.getDropoffUntilDate()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getShipperId()).as("check shipperId").isEqualTo(actual.getShipperId()))
            .satisfies(e -> assertThat(e.getCarrierId()).as("check carrierId").isEqualTo(actual.getCarrierId()))
            .satisfies(e -> assertThat(e.getTotalWeight()).as("check totalWeight").isEqualTo(actual.getTotalWeight()))
            .satisfies(e -> assertThat(e.getBiddingFromDate()).as("check biddingFromDate").isEqualTo(actual.getBiddingFromDate()))
            .satisfies(e -> assertThat(e.getBiddingUntilDate()).as("check biddingUntilDate").isEqualTo(actual.getBiddingUntilDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableRelationshipsEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container relationships")
            .satisfies(e -> assertThat(e.getPickupProvice()).as("check pickupProvice").isEqualTo(actual.getPickupProvice()))
            .satisfies(e -> assertThat(e.getPickupDistrict()).as("check pickupDistrict").isEqualTo(actual.getPickupDistrict()))
            .satisfies(e -> assertThat(e.getPickupWard()).as("check pickupWard").isEqualTo(actual.getPickupWard()))
            .satisfies(e -> assertThat(e.getDropoffProvice()).as("check dropoffProvice").isEqualTo(actual.getDropoffProvice()))
            .satisfies(e -> assertThat(e.getDropoffDistrict()).as("check dropoffDistrict").isEqualTo(actual.getDropoffDistrict()))
            .satisfies(e -> assertThat(e.getDropoffWard()).as("check dropoffWard").isEqualTo(actual.getDropoffWard()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getTruckType()).as("check truckType").isEqualTo(actual.getTruckType()))
            .satisfies(e -> assertThat(e.getTruck()).as("check truck").isEqualTo(actual.getTruck()))
            .satisfies(e -> assertThat(e.getOwner()).as("check owner").isEqualTo(actual.getOwner()));
    }
}
