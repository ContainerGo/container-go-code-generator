package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ShipperPersonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperPersonAllPropertiesEquals(ShipperPerson expected, ShipperPerson actual) {
        assertShipperPersonAutoGeneratedPropertiesEquals(expected, actual);
        assertShipperPersonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperPersonAllUpdatablePropertiesEquals(ShipperPerson expected, ShipperPerson actual) {
        assertShipperPersonUpdatableFieldsEquals(expected, actual);
        assertShipperPersonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperPersonAutoGeneratedPropertiesEquals(ShipperPerson expected, ShipperPerson actual) {
        assertThat(expected)
            .as("Verify ShipperPerson auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperPersonUpdatableFieldsEquals(ShipperPerson expected, ShipperPerson actual) {
        assertThat(expected)
            .as("Verify ShipperPerson relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperPersonUpdatableRelationshipsEquals(ShipperPerson expected, ShipperPerson actual) {
        assertThat(expected)
            .as("Verify ShipperPerson relationships")
            .satisfies(e -> assertThat(e.getGroup()).as("check group").isEqualTo(actual.getGroup()))
            .satisfies(e -> assertThat(e.getShipper()).as("check shipper").isEqualTo(actual.getShipper()));
    }
}
