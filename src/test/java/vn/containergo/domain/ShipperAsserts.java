package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ShipperAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperAllPropertiesEquals(Shipper expected, Shipper actual) {
        assertShipperAutoGeneratedPropertiesEquals(expected, actual);
        assertShipperAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperAllUpdatablePropertiesEquals(Shipper expected, Shipper actual) {
        assertShipperUpdatableFieldsEquals(expected, actual);
        assertShipperUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperAutoGeneratedPropertiesEquals(Shipper expected, Shipper actual) {
        assertThat(expected)
            .as("Verify Shipper auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperUpdatableFieldsEquals(Shipper expected, Shipper actual) {
        assertThat(expected)
            .as("Verify Shipper relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getTaxCode()).as("check taxCode").isEqualTo(actual.getTaxCode()))
            .satisfies(e -> assertThat(e.getCompanySize()).as("check companySize").isEqualTo(actual.getCompanySize()))
            .satisfies(e -> assertThat(e.getPaymentType()).as("check paymentType").isEqualTo(actual.getPaymentType()))
            .satisfies(e -> assertThat(e.getIsApproved()).as("check isApproved").isEqualTo(actual.getIsApproved()))
            .satisfies(
                e ->
                    assertThat(e.getIsBillingInformationComplete())
                        .as("check isBillingInformationComplete")
                        .isEqualTo(actual.getIsBillingInformationComplete())
            )
            .satisfies(e -> assertThat(e.getIsProfileComplete()).as("check isProfileComplete").isEqualTo(actual.getIsProfileComplete()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipperUpdatableRelationshipsEquals(Shipper expected, Shipper actual) {}
}
