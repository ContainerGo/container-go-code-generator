package vn.containergo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CarrierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierAllPropertiesEquals(Carrier expected, Carrier actual) {
        assertCarrierAutoGeneratedPropertiesEquals(expected, actual);
        assertCarrierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierAllUpdatablePropertiesEquals(Carrier expected, Carrier actual) {
        assertCarrierUpdatableFieldsEquals(expected, actual);
        assertCarrierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierAutoGeneratedPropertiesEquals(Carrier expected, Carrier actual) {
        assertThat(expected)
            .as("Verify Carrier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierUpdatableFieldsEquals(Carrier expected, Carrier actual) {
        assertThat(expected)
            .as("Verify Carrier relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getTaxCode()).as("check taxCode").isEqualTo(actual.getTaxCode()))
            .satisfies(e -> assertThat(e.getBankAccount()).as("check bankAccount").isEqualTo(actual.getBankAccount()))
            .satisfies(e -> assertThat(e.getBankName()).as("check bankName").isEqualTo(actual.getBankName()))
            .satisfies(e -> assertThat(e.getAccountName()).as("check accountName").isEqualTo(actual.getAccountName()))
            .satisfies(e -> assertThat(e.getBranchName()).as("check branchName").isEqualTo(actual.getBranchName()))
            .satisfies(e -> assertThat(e.getCompanySize()).as("check companySize").isEqualTo(actual.getCompanySize()))
            .satisfies(e -> assertThat(e.getIsApproved()).as("check isApproved").isEqualTo(actual.getIsApproved()))
            .satisfies(e -> assertThat(e.getVehicles()).as("check vehicles").isEqualTo(actual.getVehicles()))
            .satisfies(
                e -> assertThat(e.getShipmentsLeftForDay()).as("check shipmentsLeftForDay").isEqualTo(actual.getShipmentsLeftForDay())
            )
            .satisfies(e -> assertThat(e.getVerifiedSince()).as("check verifiedSince").isEqualTo(actual.getVerifiedSince()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarrierUpdatableRelationshipsEquals(Carrier expected, Carrier actual) {}
}
